// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in 
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine 
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input 
 * holds the value of this location. If the current instruction needs 
 * to write a value to M, the value is placed in outM, the address 
 * of the target location is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM==0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time step. If reset==1 then the 
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather 
 * than to the address resulting from executing the current instruction. 
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
    // Put your code here:
	//Mux(a=1,b=0,sel=instruction[15],out=inAM);
	
	Not(in=instruction[15],out=ni15);
	Or(a=ni15,b=instruction[5],out=loadA);
	
	Mux16(a=instruction,b=outALU,sel=instruction[15],out=inA);
	
	ARegister(in=inA,load=loadA,out=outA,out[0..14]=addressM);
	
	And(a=instruction[15],b=instruction[4],out=loadD);
	DRegister(in=outALU,load=loadD,out=outD);
	
	Mux16(a=outA,b=inM,sel=instruction[12],out=outAM);
	
	ALU(x=outD,y=outAM,zx=instruction[11], nx=instruction[10],zy=instruction[9], ny=instruction[8], f=instruction[7],no=instruction[6] ,out=outALU,out=outM,zr=zeroOutput,ng=negativeOutput);
	
	And(a=instruction[15],b=instruction[3],out=writeM);
	
	Not(in=reset,out=nrest);
	And(a=reset,b=nrest,out=zero);
	Not(in=zero,out=one);
	
	Not16(in=outPC,out=noutPC);
	And16(a=outPC,b=noutPC,out=zeros16);
	Not16(in=zeros16,out=ones16);
	
	Inc16(in=outPC,out=incPC);
	Or(a=zeroOutput,b=negativeOutput,out=negativeOrZeroOutput);
	Not(in=negativeOrZeroOutput,out=gt);
	And(a=instruction[0],b=gt,out=jumpFlag0);
	And(a=instruction[1],b=zeroOutput,out=jumpFlag1);
	And(a=instruction[2],b=negativeOutput,out=jumpFlag2);
	Or8Way(in[0]=zero,in[1]=zero,in[2]=zero,in[3]=zero,in[4]=zero,in[5]=jumpFlag0,in[6]=jumpFlag1,in[7]=jumpFlag2,out=jumpOr);
	And(a=jumpOr,b=instruction[15],out=jumpInstruction);
	Or(a=jumpInstruction,b=reset,out=jump);
	Mux16(a=outA,b[0..15]=zeros16,sel=reset,out=jumpZeroOrA);
	Mux16(a=incPC,b=jumpZeroOrA,sel=jump,out=inPC);
	PC(in=inPC,load=one,out=outPC,out[0..14]=pc);
}
